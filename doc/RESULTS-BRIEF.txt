FILE: t-command-echo-vs-printf.sh
# Q: The classic: `echo` vs `printf`
# A: No notable difference

FILE: t-command-grep-parallel.sh
# Q: Is `grep' faster with `parallel`?
# A: In typical files, grep is much faster. Use `parallel`only with huge files.

FILE: t-command-grep.sh
# Q: In GNU grep, is option --fixed-strings faster?
# A: No notable difference between --extended-regexp, --perl-regexp, --ignore-case

FILE: t-command-output-vs-process-substitution.sh
# Q: `cmd | while` vs `while ... done < <(process substitution)`
# A: No notable difference. Process substitution preserves variables in loop.

FILE: t-command-pwd-vs-variable-pwd.sh
# Q: How much is POSIX `$PWD` and `$OLDPWD` faster than `pwd`?
# A: It is about 7x faster to `pwd`

FILE: t-dir-empty.sh
# Q: What is the fastest way to check empty directory?
# A: array+glob is faster than built-in `compgen`

FILE: t-dir-entries.sh
# Q: Fastest to get list of dirs: loop vs `compgen` vs `ls -d`
# A: No notable differences.`ls` is good enough.

FILE: t-file-copy-check-exist.sh
# Q: Should you test existense before copying?
# A: It is about 40x faster is you test existense before copying.

FILE: t-file-for-loop-vs-awk.sh
# Q: for-loop file-by-file to awk vs awk handling all the files?
# A: It is about 2-3x faster to do it all in awk

FILE: t-file-glob-bash-compgen-vs-stat.sh
# Q: How to check if GLOB matches any files: arrays vs `compgen` vs `stat`
# A: `compgen` and array+glob are slightly faster than `stat`

FILE: t-file-grep-vs-match-in-memory.sh
# Q: To search file for matches: in memory searh vs `grep`
# A: It is about 8-10x faster to read file into memory and then do matching

FILE: t-file-newest-in-dir.sh
# Q: What is the fastest way to get newest file in a directory
# A: Use find + filters. find + awk would be tad faster but more complex.

FILE: t-file-pipe-vs-process-substitution.sh
# Q: Would pipe be slower than using process substitution?
# A: No notable difference. Pipes are efficient.

FILE: t-file-read-cat-vs-bash.sh
# Q: Howabout `$(< FILE)` vs `$(cat FILE)`
# A: It is about 2x faster to use `$(< FILE)` for small files

FILE: t-file-read-content-loop.sh
# Q: To process lines: `readarray` vs `while read < file`
# A: It is about 2x faster to use `readarray`

FILE: t-file-read-into-string.sh
# Q: To read file into string: $(< file) vs read -N vs str=$(cat file)
# A: It is about 2x faster to use $(< file)

FILE: t-file-read-match-lines-loop-vs-grep.sh
# Q: Howabout using `grep` to prefilter before loop?
# A: It is about 2x faster to use `grep` than doing all in a loop

FILE: t-file-read-shell-result.sh
# Q: Capturing command's output: `var=$()` vs reading from a temporary file?
# A: It is about 2x faster to use `var=$()`

FILE: t-file-read-with-size-check.sh
# Q: Is empty file check useful before reading file's content?
# A: No need to check. Reading even empty file is fast.

FILE: t-file-size-info.sh
# Q: What is the fastest way to read a file's size?
# A: Use `stat` or portable GNU `wc -c`.

FILE: t-function-return-value-nameref.sh
# Q: To return value from function: nameref vs `val=$(funcall)`
# A: It is about 8x faster to use nameref to return value from a function

FILE: t-statement-arithmetic-for-loop.sh
# Q: for-loop: `{1..N}` vs `$(seq N)` vs `((...))` vs POSIX `i++`
# A: The `{1..N}` and `$(seq N)` are very fast

FILE: t-statement-arithmetic-increment.sh
# Q: POSIX `i=$((i + 1))` vs `((i++))` vs `let i++` etc.
# A: No noticeable difference, POSIX `i=$((i + 1))` will do fine

FILE: t-statement-if-test-posix-vs-bash.sh
# Q: POSIX `[ $var = 1 ]` vs Bash `[[ $var = 1 ]]` etc
# A: No notable difference.

FILE: t-string-file-path-components.sh
# Q: Extract /path/file.txt to components: parameter expansion vs Â´basename` etc.
# A: It is 10-40x faster to use in memory parameter expansion where possible

FILE: t-string-match-pattern.sh
# Q: Match string by pattern: Bash vs case..esac
# A: No noticeable difference, both are extremely fast

FILE: t-string-match-regexp.sh
# Q: Match string by regexp: Bash vs expr vs grep
# A: It is 100x faster to use Bash. Expr is 1.3x faster than grep

FILE: t-string-trim-whitespace.sh
# Q: Trim whitepace using Bash RE vs `sed`
# A: It is 8x faster to use Bash, especially with fn() nameref

FILE: t-variable-array-split-string.sh
# Q: Split string into an array by IFS?
# A: It is about 10 times faster to use local IFS than use Bash array `<<<` HERE STRING

